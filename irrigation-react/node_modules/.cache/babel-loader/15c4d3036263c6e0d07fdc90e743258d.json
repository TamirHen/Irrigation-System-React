{"ast":null,"code":"/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-console */\n\n/* eslint-disable no-plusplus */\n\n/* eslint-disable no-restricted-syntax */\nimport moment from 'moment';\n\nconst nextIrrigation = (weekData, roundsData) => {\n  if (!weekData || !roundsData) {\n    return 'Error';\n  }\n\n  const nextSevenDays = [];\n  const irrigationStartHours = Object.keys(roundsData).map(round => moment(roundsData[round].startTime, 'HH:mm:ss'));\n  const sortedStartHours = irrigationStartHours.sort((a, b) => a.valueOf() - b.valueOf());\n  console.log(sortedStartHours);\n  const minTime = moment.min(irrigationStartHours);\n  const now = moment(new Date(), 'HH:mm:ss');\n\n  for (let i = 0; i < 7; i++) {\n    nextSevenDays[i] = moment().add(i, 'days').format('dddd');\n    let nextIrrigationTime = moment(new Date(), 'HH:mm:ss');\n    let nextIrrigationRound;\n\n    if (weekData[nextSevenDays[i].toLowerCase()]) {\n      if (minTime.isAfter(now)) {\n        return `${nextSevenDays[i]} ${minTime.format('HH:mm')}`;\n      }\n\n      if (i === 0) {\n        // its today\n        irrigationStartHours.forEach(startHour => {});\n      } //   for (const [, round] of Object.entries(roundsData)) {\n      //     const startTimeMoment = moment(round.startTime, 'HH:mm:ss');\n      //     if (\n      //       (round.isActive &&\n      //         i === 0 && // i = 0 - today\n      //         startTimeMoment.isAfter(moment(new Date(), 'HH:mm:ss'))) ||\n      //       (round.isActive && i !== 0)\n      //     ) {\n      //       if (startTimeMoment.isBefore(nextIrrigationTime)) {\n      //         nextIrrigationTime = startTimeMoment;\n      //         nextIrrigationRound = round;\n      //       }\n      //     }\n      //   }\n\n\n      if (nextIrrigationRound) {\n        const times = nextIrrigationRound.startTime.split(':');\n        return `${nextSevenDays[i]} ${times[0]}:${times[1]}`;\n      }\n    }\n  }\n\n  return 'Not set';\n};\n\nexport default nextIrrigation;","map":{"version":3,"sources":["/Users/tamirhen/Desktop/Irrigation-System-React/irrigation-react/src/utils/NextIrrigation.js"],"names":["moment","nextIrrigation","weekData","roundsData","nextSevenDays","irrigationStartHours","Object","keys","map","round","startTime","sortedStartHours","sort","a","b","valueOf","console","log","minTime","min","now","Date","i","add","format","nextIrrigationTime","nextIrrigationRound","toLowerCase","isAfter","forEach","startHour","times","split"],"mappings":"AAAA;;AACA;;AACA;;AACA;AACA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,UAAX,KAA0B;AAC/C,MAAI,CAACD,QAAD,IAAa,CAACC,UAAlB,EAA8B;AAC5B,WAAO,OAAP;AACD;;AACD,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,GAAxB,CAA6BC,KAAD,IACvDT,MAAM,CAACG,UAAU,CAACM,KAAD,CAAV,CAAkBC,SAAnB,EAA8B,UAA9B,CADqB,CAA7B;AAGA,QAAMC,gBAAgB,GAAGN,oBAAoB,CAACO,IAArB,CACvB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,OAAF,KAAcD,CAAC,CAACC,OAAF,EADD,CAAzB;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,gBAAZ;AACA,QAAMO,OAAO,GAAGlB,MAAM,CAACmB,GAAP,CAAWd,oBAAX,CAAhB;AACA,QAAMe,GAAG,GAAGpB,MAAM,CAAC,IAAIqB,IAAJ,EAAD,EAAa,UAAb,CAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BlB,IAAAA,aAAa,CAACkB,CAAD,CAAb,GAAmBtB,MAAM,GAAGuB,GAAT,CAAaD,CAAb,EAAgB,MAAhB,EAAwBE,MAAxB,CAA+B,MAA/B,CAAnB;AACA,QAAIC,kBAAkB,GAAGzB,MAAM,CAAC,IAAIqB,IAAJ,EAAD,EAAa,UAAb,CAA/B;AACA,QAAIK,mBAAJ;;AACA,QAAIxB,QAAQ,CAACE,aAAa,CAACkB,CAAD,CAAb,CAAiBK,WAAjB,EAAD,CAAZ,EAA8C;AAC5C,UAAIT,OAAO,CAACU,OAAR,CAAgBR,GAAhB,CAAJ,EAA0B;AACxB,eAAQ,GAAEhB,aAAa,CAACkB,CAAD,CAAI,IAAGJ,OAAO,CAACM,MAAR,CAAe,OAAf,CAAwB,EAAtD;AACD;;AAED,UAAIF,CAAC,KAAK,CAAV,EAAa;AACX;AACAjB,QAAAA,oBAAoB,CAACwB,OAArB,CAA8BC,SAAD,IAAe,CAAE,CAA9C;AACD,OAR2C,CAU5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAIJ,mBAAJ,EAAyB;AACvB,cAAMK,KAAK,GAAGL,mBAAmB,CAAChB,SAApB,CAA8BsB,KAA9B,CAAoC,GAApC,CAAd;AACA,eAAQ,GAAE5B,aAAa,CAACkB,CAAD,CAAI,IAAGS,KAAK,CAAC,CAAD,CAAI,IAAGA,KAAK,CAAC,CAAD,CAAI,EAAnD;AACD;AACF;AACF;;AACD,SAAO,SAAP;AACD,CAlDD;;AAoDA,eAAe9B,cAAf","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-restricted-syntax */\nimport moment from 'moment';\n\nconst nextIrrigation = (weekData, roundsData) => {\n  if (!weekData || !roundsData) {\n    return 'Error';\n  }\n  const nextSevenDays = [];\n  const irrigationStartHours = Object.keys(roundsData).map((round) =>\n    moment(roundsData[round].startTime, 'HH:mm:ss'),\n  );\n  const sortedStartHours = irrigationStartHours.sort(\n    (a, b) => a.valueOf() - b.valueOf(),\n  );\n  console.log(sortedStartHours);\n  const minTime = moment.min(irrigationStartHours);\n  const now = moment(new Date(), 'HH:mm:ss');\n\n  for (let i = 0; i < 7; i++) {\n    nextSevenDays[i] = moment().add(i, 'days').format('dddd');\n    let nextIrrigationTime = moment(new Date(), 'HH:mm:ss');\n    let nextIrrigationRound;\n    if (weekData[nextSevenDays[i].toLowerCase()]) {\n      if (minTime.isAfter(now)) {\n        return `${nextSevenDays[i]} ${minTime.format('HH:mm')}`;\n      }\n\n      if (i === 0) {\n        // its today\n        irrigationStartHours.forEach((startHour) => {});\n      }\n\n      //   for (const [, round] of Object.entries(roundsData)) {\n      //     const startTimeMoment = moment(round.startTime, 'HH:mm:ss');\n      //     if (\n      //       (round.isActive &&\n      //         i === 0 && // i = 0 - today\n      //         startTimeMoment.isAfter(moment(new Date(), 'HH:mm:ss'))) ||\n      //       (round.isActive && i !== 0)\n      //     ) {\n      //       if (startTimeMoment.isBefore(nextIrrigationTime)) {\n      //         nextIrrigationTime = startTimeMoment;\n      //         nextIrrigationRound = round;\n      //       }\n      //     }\n      //   }\n      if (nextIrrigationRound) {\n        const times = nextIrrigationRound.startTime.split(':');\n        return `${nextSevenDays[i]} ${times[0]}:${times[1]}`;\n      }\n    }\n  }\n  return 'Not set';\n};\n\nexport default nextIrrigation;\n"]},"metadata":{},"sourceType":"module"}