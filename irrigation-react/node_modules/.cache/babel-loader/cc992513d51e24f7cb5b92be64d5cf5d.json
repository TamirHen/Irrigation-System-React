{"ast":null,"code":"/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-console */\n\n/* eslint-disable no-plusplus */\n\n/* eslint-disable no-restricted-syntax */\nimport moment from 'moment';\n\nconst nextIrrigation = (weekData, roundsData) => {\n  if (!weekData || !roundsData) {\n    return 'Error';\n  }\n\n  const nextSevenDays = [];\n  const irrigationStartHours = Object.keys(roundsData).map(key => {\n    const round = roundsData[key];\n\n    if (round.isActive) {\n      const startTime = moment(roundsData[round].startTime, 'HH:mm:ss');\n    }\n  });\n  const minTime = moment.min(irrigationStartHours);\n\n  for (let i = 0; i < 7; i++) {\n    nextSevenDays[i] = moment().add(i, 'days').format('dddd');\n    let nextIrrigationTime = moment(new Date(), 'HH:mm:ss'); // let nextIrrigationRound;\n\n    if (weekData[nextSevenDays[i].toLowerCase()]) {\n      if (i === 0) {// its today\n      } else {\n        const times = nextIrrigationRound.startTime.split(':');\n        return `${nextSevenDays[i]} ${times[0]}:${times[1]}`;\n      }\n\n      for (const [, round] of Object.entries(roundsData)) {\n        //     const startTimeMoment = moment(round.startTime, 'HH:mm:ss');\n        //     if (\n        //       (round.isActive &&\n        //         i === 0 && // i = 0 - today\n        //         startTimeMoment.isAfter(moment(new Date(), 'HH:mm:ss'))) ||\n        //       (round.isActive && i !== 0)\n        //     ) {\n        //       if (startTimeMoment.isBefore(nextIrrigationTime)) {\n        //         nextIrrigationTime = startTimeMoment;\n        //         nextIrrigationRound = round;\n        //       }\n        //     }\n        //   }\n        if (nextIrrigationRound) {\n          const times = nextIrrigationRound.startTime.split(':');\n          return `${nextSevenDays[i]} ${times[0]}:${times[1]}`;\n        }\n      }\n    }\n  }\n\n  return 'Not set';\n};\n\nexport default nextIrrigation;","map":{"version":3,"sources":["/Users/tamirhen/Desktop/Irrigation-System-React/irrigation-react/src/utils/NextIrrigation.js"],"names":["moment","nextIrrigation","weekData","roundsData","nextSevenDays","irrigationStartHours","Object","keys","map","key","round","isActive","startTime","minTime","min","i","add","format","nextIrrigationTime","Date","toLowerCase","times","nextIrrigationRound","split","entries"],"mappings":"AAAA;;AACA;;AACA;;AACA;AACA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,UAAX,KAA0B;AAC/C,MAAI,CAACD,QAAD,IAAa,CAACC,UAAlB,EAA8B;AAC5B,WAAO,OAAP;AACD;;AACD,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,GAAxB,CAA6BC,GAAD,IAAS;AAChE,UAAMC,KAAK,GAAGP,UAAU,CAACM,GAAD,CAAxB;;AACA,QAAIC,KAAK,CAACC,QAAV,EAAoB;AAClB,YAAMC,SAAS,GAAGZ,MAAM,CAACG,UAAU,CAACO,KAAD,CAAV,CAAkBE,SAAnB,EAA8B,UAA9B,CAAxB;AACD;AACF,GAL4B,CAA7B;AAMA,QAAMC,OAAO,GAAGb,MAAM,CAACc,GAAP,CAAWT,oBAAX,CAAhB;;AAEA,OAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BX,IAAAA,aAAa,CAACW,CAAD,CAAb,GAAmBf,MAAM,GAAGgB,GAAT,CAAaD,CAAb,EAAgB,MAAhB,EAAwBE,MAAxB,CAA+B,MAA/B,CAAnB;AACA,QAAIC,kBAAkB,GAAGlB,MAAM,CAAC,IAAImB,IAAJ,EAAD,EAAa,UAAb,CAA/B,CAF0B,CAG1B;;AACA,QAAIjB,QAAQ,CAACE,aAAa,CAACW,CAAD,CAAb,CAAiBK,WAAjB,EAAD,CAAZ,EAA8C;AAC5C,UAAIL,CAAC,KAAK,CAAV,EAAa,CACX;AACD,OAFD,MAEO;AACL,cAAMM,KAAK,GAAGC,mBAAmB,CAACV,SAApB,CAA8BW,KAA9B,CAAoC,GAApC,CAAd;AACA,eAAQ,GAAEnB,aAAa,CAACW,CAAD,CAAI,IAAGM,KAAK,CAAC,CAAD,CAAI,IAAGA,KAAK,CAAC,CAAD,CAAI,EAAnD;AACD;;AACD,WAAK,MAAM,GAAGX,KAAH,CAAX,IAAwBJ,MAAM,CAACkB,OAAP,CAAerB,UAAf,CAAxB,EAAoD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAImB,mBAAJ,EAAyB;AACvB,gBAAMD,KAAK,GAAGC,mBAAmB,CAACV,SAApB,CAA8BW,KAA9B,CAAoC,GAApC,CAAd;AACA,iBAAQ,GAAEnB,aAAa,CAACW,CAAD,CAAI,IAAGM,KAAK,CAAC,CAAD,CAAI,IAAGA,KAAK,CAAC,CAAD,CAAI,EAAnD;AACD;AACF;AACF;AACF;;AACD,SAAO,SAAP;AACD,CA9CD;;AAgDA,eAAepB,cAAf","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-restricted-syntax */\nimport moment from 'moment';\n\nconst nextIrrigation = (weekData, roundsData) => {\n  if (!weekData || !roundsData) {\n    return 'Error';\n  }\n  const nextSevenDays = [];\n  const irrigationStartHours = Object.keys(roundsData).map((key) => {\n    const round = roundsData[key];\n    if (round.isActive) {\n      const startTime = moment(roundsData[round].startTime, 'HH:mm:ss');\n    }\n  });\n  const minTime = moment.min(irrigationStartHours);\n\n  for (let i = 0; i < 7; i++) {\n    nextSevenDays[i] = moment().add(i, 'days').format('dddd');\n    let nextIrrigationTime = moment(new Date(), 'HH:mm:ss');\n    // let nextIrrigationRound;\n    if (weekData[nextSevenDays[i].toLowerCase()]) {\n      if (i === 0) {\n        // its today\n      } else {\n        const times = nextIrrigationRound.startTime.split(':');\n        return `${nextSevenDays[i]} ${times[0]}:${times[1]}`;\n      }\n      for (const [, round] of Object.entries(roundsData)) {\n        //     const startTimeMoment = moment(round.startTime, 'HH:mm:ss');\n        //     if (\n        //       (round.isActive &&\n        //         i === 0 && // i = 0 - today\n        //         startTimeMoment.isAfter(moment(new Date(), 'HH:mm:ss'))) ||\n        //       (round.isActive && i !== 0)\n        //     ) {\n        //       if (startTimeMoment.isBefore(nextIrrigationTime)) {\n        //         nextIrrigationTime = startTimeMoment;\n        //         nextIrrigationRound = round;\n        //       }\n        //     }\n        //   }\n        if (nextIrrigationRound) {\n          const times = nextIrrigationRound.startTime.split(':');\n          return `${nextSevenDays[i]} ${times[0]}:${times[1]}`;\n        }\n      }\n    }\n  }\n  return 'Not set';\n};\n\nexport default nextIrrigation;\n"]},"metadata":{},"sourceType":"module"}