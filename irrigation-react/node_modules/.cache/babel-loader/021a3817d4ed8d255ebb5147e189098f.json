{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar NOTHING = typeof Symbol !== \"undefined\" ? Symbol(\"immer-nothing\") : defineProperty({}, \"immer-nothing\", true);\nvar DRAFTABLE = typeof Symbol !== \"undefined\" ? Symbol(\"immer-draftable\") : \"__$immer_draftable\";\nvar DRAFT_STATE = typeof Symbol !== \"undefined\" ? Symbol(\"immer-state\") : \"__$immer_state\";\n\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\n\nfunction isDraftable(value) {\n  if (!value || (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) !== \"object\") return false;\n  if (Array.isArray(value)) return true;\n  var proto = Object.getPrototypeOf(value);\n  if (!proto || proto === Object.prototype) return true;\n  return !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE];\n}\n\nfunction original(value) {\n  if (value && value[DRAFT_STATE]) {\n    return value[DRAFT_STATE].base;\n  } // otherwise return undefined\n\n}\n\nvar assign = Object.assign || function assign(target, value) {\n  for (var key in value) {\n    if (has(value, key)) {\n      target[key] = value[key];\n    }\n  }\n\n  return target;\n};\n\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) {\n  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));\n} : Object.getOwnPropertyNames;\n\nfunction shallowCopy(base) {\n  var invokeGetters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (Array.isArray(base)) return base.slice();\n  var clone = Object.create(Object.getPrototypeOf(base));\n  ownKeys(base).forEach(function (key) {\n    if (key === DRAFT_STATE) {\n      return; // Never copy over draft state.\n    }\n\n    var desc = Object.getOwnPropertyDescriptor(base, key);\n\n    if (desc.get) {\n      if (!invokeGetters) {\n        throw new Error(\"Immer drafts cannot have computed properties\");\n      }\n\n      desc.value = desc.get.call(base);\n    }\n\n    if (desc.enumerable) {\n      clone[key] = desc.value;\n    } else {\n      Object.defineProperty(clone, key, {\n        value: desc.value,\n        writable: true,\n        configurable: true\n      });\n    }\n  });\n  return clone;\n}\n\nfunction each(value, cb) {\n  if (Array.isArray(value)) {\n    for (var i = 0; i < value.length; i++) {\n      cb(i, value[i], value);\n    }\n  } else {\n    ownKeys(value).forEach(function (key) {\n      return cb(key, value[key], value);\n    });\n  }\n}\n\nfunction isEnumerable(base, prop) {\n  return Object.getOwnPropertyDescriptor(base, prop).enumerable;\n}\n\nfunction has(thing, prop) {\n  return Object.prototype.hasOwnProperty.call(thing, prop);\n}\n\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n} // @ts-check\n\n\nvar descriptors = {}; // For nested produce calls:\n\nvar scopes = [];\n\nvar currentScope = function currentScope() {\n  return scopes[scopes.length - 1];\n};\n\nfunction willFinalize(result, baseDraft, needPatches) {\n  var scope = currentScope();\n  scope.forEach(function (state) {\n    return state.finalizing = true;\n  });\n\n  if (result === undefined || result === baseDraft) {\n    if (needPatches) markChangesRecursively(baseDraft); // This is faster when we don't care about which attributes changed.\n\n    markChangesSweep(scope);\n  }\n}\n\nfunction createDraft(base, parent) {\n  var isArray = Array.isArray(base);\n  var draft = clonePotentialDraft(base);\n  each(draft, function (prop) {\n    proxyProperty(draft, prop, isArray || isEnumerable(base, prop));\n  }); // See \"proxy.js\" for property documentation.\n\n  var state = {\n    scope: parent ? parent.scope : currentScope(),\n    modified: false,\n    finalizing: false,\n    // es5 only\n    finalized: false,\n    assigned: {},\n    parent: parent,\n    base: base,\n    draft: draft,\n    copy: null,\n    revoke: revoke,\n    revoked: false // es5 only\n\n  };\n  createHiddenProperty(draft, DRAFT_STATE, state);\n  state.scope.push(state);\n  return draft;\n}\n\nfunction revoke() {\n  this.revoked = true;\n}\n\nfunction source(state) {\n  return state.copy || state.base;\n}\n\nfunction _get(state, prop) {\n  assertUnrevoked(state);\n  var value = source(state)[prop]; // Drafts are only created for proxyable values that exist in the base state.\n\n  if (!state.finalizing && value === state.base[prop] && isDraftable(value)) {\n    prepareCopy(state);\n    return state.copy[prop] = createDraft(value, state);\n  }\n\n  return value;\n}\n\nfunction _set(state, prop, value) {\n  assertUnrevoked(state);\n  state.assigned[prop] = true;\n\n  if (!state.modified) {\n    if (is(source(state)[prop], value)) return;\n    markChanged(state);\n    prepareCopy(state);\n  }\n\n  state.copy[prop] = value;\n}\n\nfunction markChanged(state) {\n  if (!state.modified) {\n    state.modified = true;\n    if (state.parent) markChanged(state.parent);\n  }\n}\n\nfunction prepareCopy(state) {\n  if (!state.copy) state.copy = clonePotentialDraft(state.base);\n}\n\nfunction clonePotentialDraft(base) {\n  var state = base && base[DRAFT_STATE];\n\n  if (state) {\n    state.finalizing = true;\n    var draft = shallowCopy(state.draft, true);\n    state.finalizing = false;\n    return draft;\n  }\n\n  return shallowCopy(base);\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n  var desc = descriptors[prop];\n\n  if (desc) {\n    desc.enumerable = enumerable;\n  } else {\n    descriptors[prop] = desc = {\n      configurable: true,\n      enumerable: enumerable,\n      get: function get$$1() {\n        return _get(this[DRAFT_STATE], prop);\n      },\n      set: function set$$1(value) {\n        _set(this[DRAFT_STATE], prop, value);\n      }\n    };\n  }\n\n  Object.defineProperty(draft, prop, desc);\n}\n\nfunction assertUnrevoked(state) {\n  if (state.revoked === true) throw new Error(\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + JSON.stringify(source(state)));\n} // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\nfunction markChangesSweep(scope) {\n  // The natural order of drafts in the `scope` array is based on when they\n  // were accessed. By processing drafts in reverse natural order, we have a\n  // better chance of processing leaf nodes first. When a leaf node is known to\n  // have changed, we can avoid any traversal of its ancestor nodes.\n  for (var i = scope.length - 1; i >= 0; i--) {\n    var state = scope[i];\n\n    if (state.modified === false) {\n      if (Array.isArray(state.base)) {\n        if (hasArrayChanges(state)) markChanged(state);\n      } else if (hasObjectChanges(state)) markChanged(state);\n    }\n  }\n}\n\nfunction markChangesRecursively(object) {\n  if (!object || (typeof object === \"undefined\" ? \"undefined\" : _typeof(object)) !== \"object\") return;\n  var state = object[DRAFT_STATE];\n  if (!state) return;\n  var base = state.base,\n      draft = state.draft,\n      assigned = state.assigned;\n\n  if (!Array.isArray(object)) {\n    // Look for added keys.\n    Object.keys(draft).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (base[key] === undefined && !has(base, key)) {\n        assigned[key] = true;\n        markChanged(state);\n      } else if (!assigned[key]) {\n        // Only untouched properties trigger recursion.\n        markChangesRecursively(draft[key]);\n      }\n    }); // Look for removed keys.\n\n    Object.keys(base).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (draft[key] === undefined && !has(draft, key)) {\n        assigned[key] = false;\n        markChanged(state);\n      }\n    });\n  } else if (hasArrayChanges(state)) {\n    markChanged(state);\n    assigned.length = true;\n\n    if (draft.length < base.length) {\n      for (var i = draft.length; i < base.length; i++) {\n        assigned[i] = false;\n      }\n    } else {\n      for (var _i = base.length; _i < draft.length; _i++) {\n        assigned[_i] = true;\n      }\n    }\n\n    for (var _i2 = 0; _i2 < draft.length; _i2++) {\n      // Only untouched indices trigger recursion.\n      if (assigned[_i2] === undefined) markChangesRecursively(draft[_i2]);\n    }\n  }\n}\n\nfunction hasObjectChanges(state) {\n  var base = state.base,\n      draft = state.draft; // Search for added keys. Start at the back, because non-numeric keys\n  // are ordered by time of definition on the object.\n\n  var keys = Object.keys(draft);\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    // The `undefined` check is a fast path for pre-existing keys.\n    if (base[keys[i]] === undefined && !has(base, keys[i])) {\n      return true;\n    }\n  } // Since no keys have been added, we can compare lengths to know if an\n  // object has been deleted.\n\n\n  return keys.length !== Object.keys(base).length;\n}\n\nfunction hasArrayChanges(state) {\n  var draft = state.draft;\n  if (draft.length !== state.base.length) return true; // See #116\n  // If we first shorten the length, our array interceptors will be removed.\n  // If after that new items are added, result in the same original length,\n  // those last items will have no intercepting property.\n  // So if there is no own descriptor on the last position, we know that items were removed and added\n  // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n  // the last one\n\n  var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n  if (descriptor && !descriptor.get) return true; // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n  return false;\n}\n\nfunction createHiddenProperty(target, prop, value) {\n  Object.defineProperty(target, prop, {\n    value: value,\n    enumerable: false,\n    writable: true\n  });\n}\n\nvar legacyProxy = Object.freeze({\n  scopes: scopes,\n  currentScope: currentScope,\n  willFinalize: willFinalize,\n  createDraft: createDraft\n}); // @ts-check\n// For nested produce calls:\n\nvar scopes$1 = [];\n\nvar currentScope$1 = function currentScope() {\n  return scopes$1[scopes$1.length - 1];\n}; // Do nothing before being finalized.\n\n\nfunction willFinalize$1() {}\n\nfunction createDraft$1(base, parent) {\n  var state = {\n    // Track which produce call this is associated with.\n    scope: parent ? parent.scope : currentScope$1(),\n    // True for both shallow and deep changes.\n    modified: false,\n    // Used during finalization.\n    finalized: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned: {},\n    // The parent draft state.\n    parent: parent,\n    // The base state.\n    base: base,\n    // The base proxy.\n    draft: null,\n    // Any property proxies.\n    drafts: {},\n    // The base copy with any updated values.\n    copy: null,\n    // Called by the `produce` function.\n    revoke: null\n  };\n\n  var _ref = Array.isArray(base) ? Proxy.revocable([state], arrayTraps) : Proxy.revocable(state, objectTraps),\n      revoke = _ref.revoke,\n      proxy = _ref.proxy;\n\n  state.draft = proxy;\n  state.revoke = revoke;\n  state.scope.push(state);\n  return proxy;\n}\n\nvar objectTraps = {\n  get: get$1,\n  has: function has$$1(target, prop) {\n    return prop in source$1(target);\n  },\n  ownKeys: function ownKeys$$1(target) {\n    return Reflect.ownKeys(source$1(target));\n  },\n  set: set$1,\n  deleteProperty: deleteProperty,\n  getOwnPropertyDescriptor: getOwnPropertyDescriptor,\n  defineProperty: function defineProperty() {\n    throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\"); // prettier-ignore\n  },\n  getPrototypeOf: function getPrototypeOf(target) {\n    return Object.getPrototypeOf(target.base);\n  },\n  setPrototypeOf: function setPrototypeOf() {\n    throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\"); // prettier-ignore\n  }\n};\nvar arrayTraps = {};\neach(objectTraps, function (key, fn) {\n  arrayTraps[key] = function () {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\n\narrayTraps.deleteProperty = function (state, prop) {\n  if (isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports deleting array indices\"); // prettier-ignore\n  }\n\n  return objectTraps.deleteProperty.call(this, state[0], prop);\n};\n\narrayTraps.set = function (state, prop, value) {\n  if (prop !== \"length\" && isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports setting array indices and the 'length' property\"); // prettier-ignore\n  }\n\n  return objectTraps.set.call(this, state[0], prop, value);\n};\n\nfunction source$1(state) {\n  return state.copy || state.base;\n}\n\nfunction get$1(state, prop) {\n  if (prop === DRAFT_STATE) return state;\n  var drafts = state.drafts; // Check for existing draft in unmodified state.\n\n  if (!state.modified && has(drafts, prop)) {\n    return drafts[prop];\n  }\n\n  var value = source$1(state)[prop];\n  if (state.finalized || !isDraftable(value)) return value; // Check for existing draft in modified state.\n\n  if (state.modified) {\n    // Assigned values are never drafted. This catches any drafts we created, too.\n    if (value !== state.base[prop]) return value; // Store drafts on the copy (when one exists).\n\n    drafts = state.copy;\n  }\n\n  return drafts[prop] = createDraft$1(value, state);\n}\n\nfunction set$1(state, prop, value) {\n  if (!state.modified) {\n    // Optimize based on value's truthiness. Truthy values are guaranteed to\n    // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n    // values may be drafts, but falsy values are never drafts.\n    var isUnchanged = value ? is(state.base[prop], value) || value === state.drafts[prop] : is(state.base[prop], value) && prop in state.base;\n    if (isUnchanged) return true;\n    markChanged$1(state);\n  }\n\n  state.assigned[prop] = true;\n  state.copy[prop] = value;\n  return true;\n}\n\nfunction deleteProperty(state, prop) {\n  // The `undefined` check is a fast path for pre-existing keys.\n  if (state.base[prop] !== undefined || prop in state.base) {\n    state.assigned[prop] = false;\n    markChanged$1(state);\n  }\n\n  if (state.copy) delete state.copy[prop];\n  return true;\n}\n\nfunction getOwnPropertyDescriptor(state, prop) {\n  var owner = source$1(state);\n  var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n\n  if (desc) {\n    desc.writable = true;\n    desc.configurable = !Array.isArray(owner) || prop !== \"length\";\n  }\n\n  return desc;\n}\n\nfunction markChanged$1(state) {\n  if (!state.modified) {\n    state.modified = true;\n    state.copy = assign(shallowCopy(state.base), state.drafts);\n    state.drafts = null;\n    if (state.parent) markChanged$1(state.parent);\n  }\n}\n\nvar modernProxy = Object.freeze({\n  scopes: scopes$1,\n  currentScope: currentScope$1,\n  willFinalize: willFinalize$1,\n  createDraft: createDraft$1\n});\n\nfunction generatePatches(state, basePath, patches, inversePatches) {\n  Array.isArray(state.base) ? generateArrayPatches(state, basePath, patches, inversePatches) : generateObjectPatches(state, basePath, patches, inversePatches);\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n  var base = state.base,\n      copy = state.copy,\n      assigned = state.assigned;\n  var minLength = Math.min(base.length, copy.length); // Look for replaced indices.\n\n  for (var i = 0; i < minLength; i++) {\n    if (assigned[i] && base[i] !== copy[i]) {\n      var path = basePath.concat(i);\n      patches.push({\n        op: \"replace\",\n        path: path,\n        value: copy[i]\n      });\n      inversePatches.push({\n        op: \"replace\",\n        path: path,\n        value: base[i]\n      });\n    }\n  } // Did the array expand?\n\n\n  if (minLength < copy.length) {\n    for (var _i = minLength; _i < copy.length; _i++) {\n      patches.push({\n        op: \"add\",\n        path: basePath.concat(_i),\n        value: copy[_i]\n      });\n    }\n\n    inversePatches.push({\n      op: \"replace\",\n      path: basePath.concat(\"length\"),\n      value: base.length\n    });\n  } // ...or did it shrink?\n  else if (minLength < base.length) {\n      patches.push({\n        op: \"replace\",\n        path: basePath.concat(\"length\"),\n        value: copy.length\n      });\n\n      for (var _i2 = minLength; _i2 < base.length; _i2++) {\n        inversePatches.push({\n          op: \"add\",\n          path: basePath.concat(_i2),\n          value: base[_i2]\n        });\n      }\n    }\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n  var base = state.base,\n      copy = state.copy;\n  each(state.assigned, function (key, assignedValue) {\n    var origValue = base[key];\n    var value = copy[key];\n    var op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\";\n    if (origValue === value && op === \"replace\") return;\n    var path = basePath.concat(key);\n    patches.push(op === \"remove\" ? {\n      op: op,\n      path: path\n    } : {\n      op: op,\n      path: path,\n      value: value\n    });\n    inversePatches.push(op === \"add\" ? {\n      op: \"remove\",\n      path: path\n    } : op === \"remove\" ? {\n      op: \"add\",\n      path: path,\n      value: origValue\n    } : {\n      op: \"replace\",\n      path: path,\n      value: origValue\n    });\n  });\n}\n\nfunction applyPatches(draft, patches) {\n  for (var i = 0; i < patches.length; i++) {\n    var patch = patches[i];\n    var path = patch.path;\n\n    if (path.length === 0 && patch.op === \"replace\") {\n      draft = patch.value;\n    } else {\n      var base = draft;\n\n      for (var _i3 = 0; _i3 < path.length - 1; _i3++) {\n        base = base[path[_i3]];\n        if (!base || (typeof base === \"undefined\" ? \"undefined\" : _typeof(base)) !== \"object\") throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")); // prettier-ignore\n      }\n\n      var key = path[path.length - 1];\n\n      switch (patch.op) {\n        case \"replace\":\n        case \"add\":\n          // TODO: add support is not extensive, it does not support insertion or `-` atm!\n          base[key] = patch.value;\n          break;\n\n        case \"remove\":\n          if (Array.isArray(base)) {\n            if (key !== base.length - 1) throw new Error(\"Only the last index of an array can be removed, index: \" + key + \", length: \" + base.length); // prettier-ignore\n\n            base.length -= 1;\n          } else {\n            delete base[key];\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unsupported patch operation: \" + patch.op);\n      }\n    }\n  }\n\n  return draft;\n}\n\nfunction verifyMinified() {}\n\nvar configDefaults = {\n  useProxies: typeof Proxy !== \"undefined\" && typeof Reflect !== \"undefined\",\n  autoFreeze: typeof process !== \"undefined\" ? process.env.NODE_ENV !== \"production\" : verifyMinified.name === \"verifyMinified\",\n  onAssign: null,\n  onDelete: null,\n  onCopy: null\n};\n\nvar Immer = function () {\n  function Immer(config) {\n    classCallCheck(this, Immer);\n    assign(this, configDefaults, config);\n    this.setUseProxies(this.useProxies);\n    this.produce = this.produce.bind(this);\n  }\n\n  createClass(Immer, [{\n    key: \"produce\",\n    value: function produce(base, recipe, patchListener) {\n      var _this = this; // curried invocation\n\n\n      if (typeof base === \"function\" && typeof recipe !== \"function\") {\n        var defaultBase = recipe;\n        recipe = base; // prettier-ignore\n\n        return function () {\n          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultBase;\n          return _this.produce(base, function (draft) {\n            var _recipe;\n\n            return (_recipe = recipe).call.apply(_recipe, [draft, draft].concat(args));\n          });\n        };\n      } // prettier-ignore\n\n\n      {\n        if (typeof recipe !== \"function\") throw new Error(\"if first argument is not a function, the second argument to produce should be a function\");\n        if (patchListener !== undefined && typeof patchListener !== \"function\") throw new Error(\"the third argument of a producer should not be set or a function\");\n      }\n      var result = void 0; // Only create proxies for plain objects/arrays.\n\n      if (!isDraftable(base)) {\n        result = recipe(base);\n        if (result === undefined) return base;\n      } // The given value must be proxied.\n      else {\n          this.scopes.push([]);\n          var baseDraft = this.createDraft(base);\n\n          try {\n            result = recipe.call(baseDraft, baseDraft);\n            this.willFinalize(result, baseDraft, !!patchListener); // Never generate patches when no listener exists.\n\n            var patches = patchListener && [],\n                inversePatches = patchListener && []; // Finalize the modified draft...\n\n            if (result === undefined || result === baseDraft) {\n              result = this.finalize(baseDraft, [], patches, inversePatches);\n            } // ...or use a replacement value.\n            else {\n                // Users must never modify the draft _and_ return something else.\n                if (baseDraft[DRAFT_STATE].modified) throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\"); // prettier-ignore\n                // Finalize the replacement in case it contains (or is) a subset of the draft.\n\n                if (isDraftable(result)) result = this.finalize(result);\n\n                if (patchListener) {\n                  patches.push({\n                    op: \"replace\",\n                    path: [],\n                    value: result\n                  });\n                  inversePatches.push({\n                    op: \"replace\",\n                    path: [],\n                    value: base\n                  });\n                }\n              }\n          } finally {\n            this.currentScope().forEach(function (state) {\n              return state.revoke();\n            });\n            this.scopes.pop();\n          }\n\n          patchListener && patchListener(patches, inversePatches);\n        } // Normalize the result.\n\n\n      return result === NOTHING ? undefined : result;\n    }\n  }, {\n    key: \"setAutoFreeze\",\n    value: function setAutoFreeze(value) {\n      this.autoFreeze = value;\n    }\n  }, {\n    key: \"setUseProxies\",\n    value: function setUseProxies(value) {\n      this.useProxies = value;\n      assign(this, value ? modernProxy : legacyProxy);\n    }\n  }, {\n    key: \"applyPatches\",\n    value: function applyPatches$$1(base, patches) {\n      // Mutate the base state when a draft is passed.\n      if (isDraft(base)) {\n        return applyPatches(base, patches);\n      } // Otherwise, produce a copy of the base state.\n\n\n      return this.produce(base, function (draft) {\n        return applyPatches(draft, patches);\n      });\n    }\n    /**\n     * @internal\n     * Finalize a draft, returning either the unmodified base state or a modified\n     * copy of the base state.\n     */\n\n  }, {\n    key: \"finalize\",\n    value: function finalize(draft, path, patches, inversePatches) {\n      var _this2 = this;\n\n      var state = draft[DRAFT_STATE];\n\n      if (!state) {\n        if (Object.isFrozen(draft)) return draft;\n        return this.finalizeTree(draft);\n      } // Never finalize drafts owned by an outer scope.\n\n\n      if (state.scope !== this.currentScope()) {\n        return draft;\n      }\n\n      if (!state.modified) return state.base;\n\n      if (!state.finalized) {\n        state.finalized = true;\n        this.finalizeTree(state.draft, path, patches, inversePatches);\n\n        if (this.onDelete) {\n          // The `assigned` object is unreliable with ES5 drafts.\n          if (this.useProxies) {\n            var assigned = state.assigned;\n\n            for (var prop in assigned) {\n              if (!assigned[prop]) this.onDelete(state, prop);\n            }\n          } else {\n            var base = state.base,\n                copy = state.copy;\n            each(base, function (prop) {\n              if (!has(copy, prop)) _this2.onDelete(state, prop);\n            });\n          }\n        }\n\n        if (this.onCopy) this.onCopy(state); // Nested producers must never auto-freeze their result,\n        // because it may contain drafts from parent producers.\n\n        if (this.autoFreeze && this.scopes.length === 1) {\n          Object.freeze(state.copy);\n        }\n\n        if (patches) generatePatches(state, path, patches, inversePatches);\n      }\n\n      return state.copy;\n    }\n    /**\n     * @internal\n     * Finalize all drafts in the given state tree.\n     */\n\n  }, {\n    key: \"finalizeTree\",\n    value: function finalizeTree(root, path, patches, inversePatches) {\n      var _this3 = this;\n\n      var state = root[DRAFT_STATE];\n\n      if (state) {\n        if (!this.useProxies) {\n          state.finalizing = true;\n          state.copy = shallowCopy(state.draft, true);\n          state.finalizing = false;\n        }\n\n        root = state.copy;\n      }\n\n      var onAssign = this.onAssign;\n\n      var finalizeProperty = function finalizeProperty(prop, value, parent) {\n        if (value === parent) {\n          throw Error(\"Immer forbids circular references\");\n        } // The only possible draft (in the scope of a `finalizeTree` call) is the `root` object.\n\n\n        var inDraft = !!state && parent === root;\n\n        if (isDraft(value)) {\n          value = // Patches are never generated for assigned properties.\n          patches && inDraft && !state.assigned[prop] ? _this3.finalize(value, path.concat(prop), patches, inversePatches) // prettier-ignore\n          : _this3.finalize(value); // Preserve non-enumerable properties.\n\n          if (Array.isArray(parent) || isEnumerable(parent, prop)) {\n            parent[prop] = value;\n          } else {\n            Object.defineProperty(parent, prop, {\n              value: value\n            });\n          } // Unchanged drafts are never passed to the `onAssign` hook.\n\n\n          if (inDraft && value === state.base[prop]) return;\n        } // Unchanged draft properties are ignored.\n        else if (inDraft && is(value, state.base[prop])) {\n            return;\n          } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n          else if (isDraftable(value) && !Object.isFrozen(value)) {\n              each(value, finalizeProperty);\n            }\n\n        if (inDraft && onAssign) {\n          onAssign(state, prop, value);\n        }\n      };\n\n      each(root, finalizeProperty);\n      return root;\n    }\n  }]);\n  return Immer;\n}();\n\nvar immer = new Immer();\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\n\nvar produce = immer.produce;\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\n\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\n\nvar setUseProxies = immer.setUseProxies.bind(immer);\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\n\nvar applyPatches$1 = immer.applyPatches.bind(immer);\nexport { produce, setAutoFreeze, setUseProxies, applyPatches$1 as applyPatches, Immer, original, isDraft, isDraftable, NOTHING as nothing, DRAFTABLE as immerable };\nexport default produce;","map":{"version":3,"sources":["../src/common.js","../src/es5.js","../src/proxy.js","../src/patches.js","../src/immer.js","../src/index.js"],"names":["NOTHING","Symbol","DRAFTABLE","DRAFT_STATE","value","Array","proto","Object","assign","has","ownKeys","Reflect","invokeGetters","base","clone","key","desc","i","cb","x","y","descriptors","scopes","currentScope","scope","state","result","markChangesRecursively","isArray","draft","clonePotentialDraft","isEnumerable","parent","source","isDraftable","createDraft","is","markChanged","shallowCopy","get","JSON","hasArrayChanges","hasObjectChanges","object","assigned","keys","descriptor","revoke","proxy","Proxy","objectTraps","prop","target","arrayTraps","each","arguments","fn","isNaN","parseInt","drafts","isUnchanged","owner","generateArrayPatches","generateObjectPatches","copy","minLength","Math","path","basePath","op","length","origValue","patches","patch","configDefaults","process","verifyMinified","Immer","defaultBase","args","patchListener","recipe","baseDraft","inversePatches","isDraft","applyPatches","generatePatches","root","onAssign","finalizeProperty","Error","inDraft","immer","produce","setAutoFreeze","setUseProxies"],"mappings":"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","sourcesContent":["export const NOTHING =\n    typeof Symbol !== \"undefined\"\n        ? Symbol(\"immer-nothing\")\n        : {[\"immer-nothing\"]: true}\n\nexport const DRAFTABLE =\n    typeof Symbol !== \"undefined\"\n        ? Symbol(\"immer-draftable\")\n        : \"__$immer_draftable\"\n\nexport const DRAFT_STATE =\n    typeof Symbol !== \"undefined\" ? Symbol(\"immer-state\") : \"__$immer_state\"\n\nexport function isDraft(value) {\n    return !!value && !!value[DRAFT_STATE]\n}\n\nexport function isDraftable(value) {\n    if (!value || typeof value !== \"object\") return false\n    if (Array.isArray(value)) return true\n    const proto = Object.getPrototypeOf(value)\n    if (!proto || proto === Object.prototype) return true\n    return !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE]\n}\n\nexport function original(value) {\n    if (value && value[DRAFT_STATE]) {\n        return value[DRAFT_STATE].base\n    }\n    // otherwise return undefined\n}\n\nexport const assign =\n    Object.assign ||\n    function assign(target, value) {\n        for (let key in value) {\n            if (has(value, key)) {\n                target[key] = value[key]\n            }\n        }\n        return target\n    }\n\nexport const ownKeys =\n    typeof Reflect !== \"undefined\" && Reflect.ownKeys\n        ? Reflect.ownKeys\n        : typeof Object.getOwnPropertySymbols !== \"undefined\"\n        ? obj =>\n              Object.getOwnPropertyNames(obj).concat(\n                  Object.getOwnPropertySymbols(obj)\n              )\n        : Object.getOwnPropertyNames\n\nexport function shallowCopy(base, invokeGetters = false) {\n    if (Array.isArray(base)) return base.slice()\n    const clone = Object.create(Object.getPrototypeOf(base))\n    ownKeys(base).forEach(key => {\n        if (key === DRAFT_STATE) {\n            return // Never copy over draft state.\n        }\n        const desc = Object.getOwnPropertyDescriptor(base, key)\n        if (desc.get) {\n            if (!invokeGetters) {\n                throw new Error(\"Immer drafts cannot have computed properties\")\n            }\n            desc.value = desc.get.call(base)\n        }\n        if (desc.enumerable) {\n            clone[key] = desc.value\n        } else {\n            Object.defineProperty(clone, key, {\n                value: desc.value,\n                writable: true,\n                configurable: true\n            })\n        }\n    })\n    return clone\n}\n\nexport function each(value, cb) {\n    if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; i++) cb(i, value[i], value)\n    } else {\n        ownKeys(value).forEach(key => cb(key, value[key], value))\n    }\n}\n\nexport function isEnumerable(base, prop) {\n    return Object.getOwnPropertyDescriptor(base, prop).enumerable\n}\n\nexport function has(thing, prop) {\n    return Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\nexport function is(x, y) {\n    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y\n    } else {\n        return x !== x && y !== y\n    }\n}\n","\"use strict\"\n// @ts-check\n\nimport {\n    each,\n    has,\n    is,\n    isDraft,\n    isDraftable,\n    isEnumerable,\n    shallowCopy,\n    DRAFT_STATE\n} from \"./common\"\n\nconst descriptors = {}\n\n// For nested produce calls:\nexport const scopes = []\nexport const currentScope = () => scopes[scopes.length - 1]\n\nexport function willFinalize(result, baseDraft, needPatches) {\n    const scope = currentScope()\n    scope.forEach(state => (state.finalizing = true))\n    if (result === undefined || result === baseDraft) {\n        if (needPatches) markChangesRecursively(baseDraft)\n        // This is faster when we don't care about which attributes changed.\n        markChangesSweep(scope)\n    }\n}\n\nexport function createDraft(base, parent) {\n    const isArray = Array.isArray(base)\n    const draft = clonePotentialDraft(base)\n    each(draft, prop => {\n        proxyProperty(draft, prop, isArray || isEnumerable(base, prop))\n    })\n\n    // See \"proxy.js\" for property documentation.\n    const state = {\n        scope: parent ? parent.scope : currentScope(),\n        modified: false,\n        finalizing: false, // es5 only\n        finalized: false,\n        assigned: {},\n        parent,\n        base,\n        draft,\n        copy: null,\n        revoke,\n        revoked: false // es5 only\n    }\n\n    createHiddenProperty(draft, DRAFT_STATE, state)\n    state.scope.push(state)\n    return draft\n}\n\nfunction revoke() {\n    this.revoked = true\n}\n\nfunction source(state) {\n    return state.copy || state.base\n}\n\nfunction get(state, prop) {\n    assertUnrevoked(state)\n    const value = source(state)[prop]\n    // Drafts are only created for proxyable values that exist in the base state.\n    if (!state.finalizing && value === state.base[prop] && isDraftable(value)) {\n        prepareCopy(state)\n        return (state.copy[prop] = createDraft(value, state))\n    }\n    return value\n}\n\nfunction set(state, prop, value) {\n    assertUnrevoked(state)\n    state.assigned[prop] = true\n    if (!state.modified) {\n        if (is(source(state)[prop], value)) return\n        markChanged(state)\n        prepareCopy(state)\n    }\n    state.copy[prop] = value\n}\n\nfunction markChanged(state) {\n    if (!state.modified) {\n        state.modified = true\n        if (state.parent) markChanged(state.parent)\n    }\n}\n\nfunction prepareCopy(state) {\n    if (!state.copy) state.copy = clonePotentialDraft(state.base)\n}\n\nfunction clonePotentialDraft(base) {\n    const state = base && base[DRAFT_STATE]\n    if (state) {\n        state.finalizing = true\n        const draft = shallowCopy(state.draft, true)\n        state.finalizing = false\n        return draft\n    }\n    return shallowCopy(base)\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n    let desc = descriptors[prop]\n    if (desc) {\n        desc.enumerable = enumerable\n    } else {\n        descriptors[prop] = desc = {\n            configurable: true,\n            enumerable,\n            get() {\n                return get(this[DRAFT_STATE], prop)\n            },\n            set(value) {\n                set(this[DRAFT_STATE], prop, value)\n            }\n        }\n    }\n    Object.defineProperty(draft, prop, desc)\n}\n\nfunction assertUnrevoked(state) {\n    if (state.revoked === true)\n        throw new Error(\n            \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n                JSON.stringify(source(state))\n        )\n}\n\n// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\nfunction markChangesSweep(scope) {\n    // The natural order of drafts in the `scope` array is based on when they\n    // were accessed. By processing drafts in reverse natural order, we have a\n    // better chance of processing leaf nodes first. When a leaf node is known to\n    // have changed, we can avoid any traversal of its ancestor nodes.\n    for (let i = scope.length - 1; i >= 0; i--) {\n        const state = scope[i]\n        if (state.modified === false) {\n            if (Array.isArray(state.base)) {\n                if (hasArrayChanges(state)) markChanged(state)\n            } else if (hasObjectChanges(state)) markChanged(state)\n        }\n    }\n}\n\nfunction markChangesRecursively(object) {\n    if (!object || typeof object !== \"object\") return\n    const state = object[DRAFT_STATE]\n    if (!state) return\n    const {base, draft, assigned} = state\n    if (!Array.isArray(object)) {\n        // Look for added keys.\n        Object.keys(draft).forEach(key => {\n            // The `undefined` check is a fast path for pre-existing keys.\n            if (base[key] === undefined && !has(base, key)) {\n                assigned[key] = true\n                markChanged(state)\n            } else if (!assigned[key]) {\n                // Only untouched properties trigger recursion.\n                markChangesRecursively(draft[key])\n            }\n        })\n        // Look for removed keys.\n        Object.keys(base).forEach(key => {\n            // The `undefined` check is a fast path for pre-existing keys.\n            if (draft[key] === undefined && !has(draft, key)) {\n                assigned[key] = false\n                markChanged(state)\n            }\n        })\n    } else if (hasArrayChanges(state)) {\n        markChanged(state)\n        assigned.length = true\n        if (draft.length < base.length) {\n            for (let i = draft.length; i < base.length; i++) assigned[i] = false\n        } else {\n            for (let i = base.length; i < draft.length; i++) assigned[i] = true\n        }\n        for (let i = 0; i < draft.length; i++) {\n            // Only untouched indices trigger recursion.\n            if (assigned[i] === undefined) markChangesRecursively(draft[i])\n        }\n    }\n}\n\nfunction hasObjectChanges(state) {\n    const {base, draft} = state\n\n    // Search for added keys. Start at the back, because non-numeric keys\n    // are ordered by time of definition on the object.\n    const keys = Object.keys(draft)\n    for (let i = keys.length - 1; i >= 0; i--) {\n        // The `undefined` check is a fast path for pre-existing keys.\n        if (base[keys[i]] === undefined && !has(base, keys[i])) {\n            return true\n        }\n    }\n\n    // Since no keys have been added, we can compare lengths to know if an\n    // object has been deleted.\n    return keys.length !== Object.keys(base).length\n}\n\nfunction hasArrayChanges(state) {\n    const {draft} = state\n    if (draft.length !== state.base.length) return true\n    // See #116\n    // If we first shorten the length, our array interceptors will be removed.\n    // If after that new items are added, result in the same original length,\n    // those last items will have no intercepting property.\n    // So if there is no own descriptor on the last position, we know that items were removed and added\n    // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n    // the last one\n    const descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1)\n    // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n    if (descriptor && !descriptor.get) return true\n    // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n    return false\n}\n\nfunction createHiddenProperty(target, prop, value) {\n    Object.defineProperty(target, prop, {\n        value: value,\n        enumerable: false,\n        writable: true\n    })\n}\n","\"use strict\"\n// @ts-check\n\nimport {\n    assign,\n    each,\n    has,\n    is,\n    isDraftable,\n    isDraft,\n    shallowCopy,\n    DRAFT_STATE\n} from \"./common\"\n\n// For nested produce calls:\nexport const scopes = []\nexport const currentScope = () => scopes[scopes.length - 1]\n\n// Do nothing before being finalized.\nexport function willFinalize() {}\n\nexport function createDraft(base, parent) {\n    const state = {\n        // Track which produce call this is associated with.\n        scope: parent ? parent.scope : currentScope(),\n        // True for both shallow and deep changes.\n        modified: false,\n        // Used during finalization.\n        finalized: false,\n        // Track which properties have been assigned (true) or deleted (false).\n        assigned: {},\n        // The parent draft state.\n        parent,\n        // The base state.\n        base,\n        // The base proxy.\n        draft: null,\n        // Any property proxies.\n        drafts: {},\n        // The base copy with any updated values.\n        copy: null,\n        // Called by the `produce` function.\n        revoke: null\n    }\n\n    const {revoke, proxy} = Array.isArray(base)\n        ? Proxy.revocable([state], arrayTraps)\n        : Proxy.revocable(state, objectTraps)\n\n    state.draft = proxy\n    state.revoke = revoke\n\n    state.scope.push(state)\n    return proxy\n}\n\nconst objectTraps = {\n    get,\n    has(target, prop) {\n        return prop in source(target)\n    },\n    ownKeys(target) {\n        return Reflect.ownKeys(source(target))\n    },\n    set,\n    deleteProperty,\n    getOwnPropertyDescriptor,\n    defineProperty() {\n        throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\") // prettier-ignore\n    },\n    getPrototypeOf(target) {\n        return Object.getPrototypeOf(target.base)\n    },\n    setPrototypeOf() {\n        throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\") // prettier-ignore\n    }\n}\n\nconst arrayTraps = {}\neach(objectTraps, (key, fn) => {\n    arrayTraps[key] = function() {\n        arguments[0] = arguments[0][0]\n        return fn.apply(this, arguments)\n    }\n})\narrayTraps.deleteProperty = function(state, prop) {\n    if (isNaN(parseInt(prop))) {\n        throw new Error(\"Immer only supports deleting array indices\") // prettier-ignore\n    }\n    return objectTraps.deleteProperty.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n    if (prop !== \"length\" && isNaN(parseInt(prop))) {\n        throw new Error(\"Immer only supports setting array indices and the 'length' property\") // prettier-ignore\n    }\n    return objectTraps.set.call(this, state[0], prop, value)\n}\n\nfunction source(state) {\n    return state.copy || state.base\n}\n\nfunction get(state, prop) {\n    if (prop === DRAFT_STATE) return state\n    let {drafts} = state\n\n    // Check for existing draft in unmodified state.\n    if (!state.modified && has(drafts, prop)) {\n        return drafts[prop]\n    }\n\n    const value = source(state)[prop]\n    if (state.finalized || !isDraftable(value)) return value\n\n    // Check for existing draft in modified state.\n    if (state.modified) {\n        // Assigned values are never drafted. This catches any drafts we created, too.\n        if (value !== state.base[prop]) return value\n        // Store drafts on the copy (when one exists).\n        drafts = state.copy\n    }\n\n    return (drafts[prop] = createDraft(value, state))\n}\n\nfunction set(state, prop, value) {\n    if (!state.modified) {\n        // Optimize based on value's truthiness. Truthy values are guaranteed to\n        // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n        // values may be drafts, but falsy values are never drafts.\n        const isUnchanged = value\n            ? is(state.base[prop], value) || value === state.drafts[prop]\n            : is(state.base[prop], value) && prop in state.base\n        if (isUnchanged) return true\n        markChanged(state)\n    }\n    state.assigned[prop] = true\n    state.copy[prop] = value\n    return true\n}\n\nfunction deleteProperty(state, prop) {\n    // The `undefined` check is a fast path for pre-existing keys.\n    if (state.base[prop] !== undefined || prop in state.base) {\n        state.assigned[prop] = false\n        markChanged(state)\n    }\n    if (state.copy) delete state.copy[prop]\n    return true\n}\n\nfunction getOwnPropertyDescriptor(state, prop) {\n    const owner = source(state)\n    const desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n    if (desc) {\n        desc.writable = true\n        desc.configurable = !Array.isArray(owner) || prop !== \"length\"\n    }\n    return desc\n}\n\nfunction markChanged(state) {\n    if (!state.modified) {\n        state.modified = true\n        state.copy = assign(shallowCopy(state.base), state.drafts)\n        state.drafts = null\n        if (state.parent) markChanged(state.parent)\n    }\n}\n","import {each} from \"./common\"\n\nexport function generatePatches(state, basePath, patches, inversePatches) {\n    Array.isArray(state.base)\n        ? generateArrayPatches(state, basePath, patches, inversePatches)\n        : generateObjectPatches(state, basePath, patches, inversePatches)\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n    const {base, copy, assigned} = state\n    const minLength = Math.min(base.length, copy.length)\n\n    // Look for replaced indices.\n    for (let i = 0; i < minLength; i++) {\n        if (assigned[i] && base[i] !== copy[i]) {\n            const path = basePath.concat(i)\n            patches.push({op: \"replace\", path, value: copy[i]})\n            inversePatches.push({op: \"replace\", path, value: base[i]})\n        }\n    }\n\n    // Did the array expand?\n    if (minLength < copy.length) {\n        for (let i = minLength; i < copy.length; i++) {\n            patches.push({\n                op: \"add\",\n                path: basePath.concat(i),\n                value: copy[i]\n            })\n        }\n        inversePatches.push({\n            op: \"replace\",\n            path: basePath.concat(\"length\"),\n            value: base.length\n        })\n    }\n\n    // ...or did it shrink?\n    else if (minLength < base.length) {\n        patches.push({\n            op: \"replace\",\n            path: basePath.concat(\"length\"),\n            value: copy.length\n        })\n        for (let i = minLength; i < base.length; i++) {\n            inversePatches.push({\n                op: \"add\",\n                path: basePath.concat(i),\n                value: base[i]\n            })\n        }\n    }\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n    const {base, copy} = state\n    each(state.assigned, (key, assignedValue) => {\n        const origValue = base[key]\n        const value = copy[key]\n        const op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\"\n        if (origValue === value && op === \"replace\") return\n        const path = basePath.concat(key)\n        patches.push(op === \"remove\" ? {op, path} : {op, path, value})\n        inversePatches.push(\n            op === \"add\"\n                ? {op: \"remove\", path}\n                : op === \"remove\"\n                ? {op: \"add\", path, value: origValue}\n                : {op: \"replace\", path, value: origValue}\n        )\n    })\n}\n\nexport function applyPatches(draft, patches) {\n    for (let i = 0; i < patches.length; i++) {\n        const patch = patches[i]\n        const {path} = patch\n        if (path.length === 0 && patch.op === \"replace\") {\n            draft = patch.value\n        } else {\n            let base = draft\n            for (let i = 0; i < path.length - 1; i++) {\n                base = base[path[i]]\n                if (!base || typeof base !== \"object\")\n                    throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")) // prettier-ignore\n            }\n            const key = path[path.length - 1]\n            switch (patch.op) {\n                case \"replace\":\n                case \"add\":\n                    // TODO: add support is not extensive, it does not support insertion or `-` atm!\n                    base[key] = patch.value\n                    break\n                case \"remove\":\n                    if (Array.isArray(base)) {\n                        if (key !== base.length - 1)\n                            throw new Error(`Only the last index of an array can be removed, index: ${key}, length: ${base.length}`) // prettier-ignore\n                        base.length -= 1\n                    } else {\n                        delete base[key]\n                    }\n                    break\n                default:\n                    throw new Error(\"Unsupported patch operation: \" + patch.op)\n            }\n        }\n    }\n    return draft\n}\n","import * as legacyProxy from \"./es5\"\nimport * as modernProxy from \"./proxy\"\nimport {applyPatches, generatePatches} from \"./patches\"\nimport {\n    assign,\n    each,\n    has,\n    is,\n    isDraft,\n    isDraftable,\n    isEnumerable,\n    shallowCopy,\n    DRAFT_STATE,\n    NOTHING\n} from \"./common\"\n\nfunction verifyMinified() {}\n\nconst configDefaults = {\n    useProxies: typeof Proxy !== \"undefined\" && typeof Reflect !== \"undefined\",\n    autoFreeze:\n        typeof process !== \"undefined\"\n            ? process.env.NODE_ENV !== \"production\"\n            : verifyMinified.name === \"verifyMinified\",\n    onAssign: null,\n    onDelete: null,\n    onCopy: null\n}\n\nexport class Immer {\n    constructor(config) {\n        assign(this, configDefaults, config)\n        this.setUseProxies(this.useProxies)\n        this.produce = this.produce.bind(this)\n    }\n    produce(base, recipe, patchListener) {\n        // curried invocation\n        if (typeof base === \"function\" && typeof recipe !== \"function\") {\n            const defaultBase = recipe\n            recipe = base\n\n            // prettier-ignore\n            return (base = defaultBase, ...args) =>\n                this.produce(base, draft => recipe.call(draft, draft, ...args))\n        }\n\n        // prettier-ignore\n        {\n            if (typeof recipe !== \"function\") throw new Error(\"if first argument is not a function, the second argument to produce should be a function\")\n            if (patchListener !== undefined && typeof patchListener !== \"function\") throw new Error(\"the third argument of a producer should not be set or a function\")\n        }\n\n        let result\n        // Only create proxies for plain objects/arrays.\n        if (!isDraftable(base)) {\n            result = recipe(base)\n            if (result === undefined) return base\n        }\n        // The given value must be proxied.\n        else {\n            this.scopes.push([])\n            const baseDraft = this.createDraft(base)\n            try {\n                result = recipe.call(baseDraft, baseDraft)\n                this.willFinalize(result, baseDraft, !!patchListener)\n\n                // Never generate patches when no listener exists.\n                var patches = patchListener && [],\n                    inversePatches = patchListener && []\n\n                // Finalize the modified draft...\n                if (result === undefined || result === baseDraft) {\n                    result = this.finalize(\n                        baseDraft,\n                        [],\n                        patches,\n                        inversePatches\n                    )\n                }\n                // ...or use a replacement value.\n                else {\n                    // Users must never modify the draft _and_ return something else.\n                    if (baseDraft[DRAFT_STATE].modified)\n                        throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\") // prettier-ignore\n\n                    // Finalize the replacement in case it contains (or is) a subset of the draft.\n                    if (isDraftable(result)) result = this.finalize(result)\n\n                    if (patchListener) {\n                        patches.push({\n                            op: \"replace\",\n                            path: [],\n                            value: result\n                        })\n                        inversePatches.push({\n                            op: \"replace\",\n                            path: [],\n                            value: base\n                        })\n                    }\n                }\n            } finally {\n                this.currentScope().forEach(state => state.revoke())\n                this.scopes.pop()\n            }\n            patchListener && patchListener(patches, inversePatches)\n        }\n        // Normalize the result.\n        return result === NOTHING ? undefined : result\n    }\n    setAutoFreeze(value) {\n        this.autoFreeze = value\n    }\n    setUseProxies(value) {\n        this.useProxies = value\n        assign(this, value ? modernProxy : legacyProxy)\n    }\n    applyPatches(base, patches) {\n        // Mutate the base state when a draft is passed.\n        if (isDraft(base)) {\n            return applyPatches(base, patches)\n        }\n        // Otherwise, produce a copy of the base state.\n        return this.produce(base, draft => applyPatches(draft, patches))\n    }\n    /**\n     * @internal\n     * Finalize a draft, returning either the unmodified base state or a modified\n     * copy of the base state.\n     */\n    finalize(draft, path, patches, inversePatches) {\n        const state = draft[DRAFT_STATE]\n        if (!state) {\n            if (Object.isFrozen(draft)) return draft\n            return this.finalizeTree(draft)\n        }\n        // Never finalize drafts owned by an outer scope.\n        if (state.scope !== this.currentScope()) {\n            return draft\n        }\n        if (!state.modified) return state.base\n        if (!state.finalized) {\n            state.finalized = true\n            this.finalizeTree(state.draft, path, patches, inversePatches)\n            if (this.onDelete) {\n                // The `assigned` object is unreliable with ES5 drafts.\n                if (this.useProxies) {\n                    const {assigned} = state\n                    for (const prop in assigned) {\n                        if (!assigned[prop]) this.onDelete(state, prop)\n                    }\n                } else {\n                    const {base, copy} = state\n                    each(base, prop => {\n                        if (!has(copy, prop)) this.onDelete(state, prop)\n                    })\n                }\n            }\n            if (this.onCopy) this.onCopy(state)\n\n            // Nested producers must never auto-freeze their result,\n            // because it may contain drafts from parent producers.\n            if (this.autoFreeze && this.scopes.length === 1) {\n                Object.freeze(state.copy)\n            }\n\n            if (patches) generatePatches(state, path, patches, inversePatches)\n        }\n        return state.copy\n    }\n    /**\n     * @internal\n     * Finalize all drafts in the given state tree.\n     */\n    finalizeTree(root, path, patches, inversePatches) {\n        const state = root[DRAFT_STATE]\n        if (state) {\n            if (!this.useProxies) {\n                state.finalizing = true\n                state.copy = shallowCopy(state.draft, true)\n                state.finalizing = false\n            }\n            root = state.copy\n        }\n\n        const {onAssign} = this\n        const finalizeProperty = (prop, value, parent) => {\n            if (value === parent) {\n                throw Error(\"Immer forbids circular references\")\n            }\n\n            // The only possible draft (in the scope of a `finalizeTree` call) is the `root` object.\n            const inDraft = !!state && parent === root\n\n            if (isDraft(value)) {\n                value =\n                    // Patches are never generated for assigned properties.\n                    patches && inDraft && !state.assigned[prop]\n                        ? this.finalize(value, path.concat(prop), patches, inversePatches) // prettier-ignore\n                        : this.finalize(value)\n\n                // Preserve non-enumerable properties.\n                if (Array.isArray(parent) || isEnumerable(parent, prop)) {\n                    parent[prop] = value\n                } else {\n                    Object.defineProperty(parent, prop, {value})\n                }\n\n                // Unchanged drafts are never passed to the `onAssign` hook.\n                if (inDraft && value === state.base[prop]) return\n            }\n            // Unchanged draft properties are ignored.\n            else if (inDraft && is(value, state.base[prop])) {\n                return\n            }\n            // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n            else if (isDraftable(value) && !Object.isFrozen(value)) {\n                each(value, finalizeProperty)\n            }\n\n            if (inDraft && onAssign) {\n                onAssign(state, prop, value)\n            }\n        }\n\n        each(root, finalizeProperty)\n        return root\n    }\n}\n","import {Immer} from \"./immer\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce = immer.produce\nexport default produce\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\nexport {\n    original,\n    isDraft,\n    isDraftable,\n    NOTHING as nothing,\n    DRAFTABLE as immerable\n} from \"./common\"\n\nexport {Immer}\n"]},"metadata":{},"sourceType":"module"}