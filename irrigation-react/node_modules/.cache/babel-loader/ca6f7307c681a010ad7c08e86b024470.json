{"ast":null,"code":"/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-console */\n\n/* eslint-disable no-plusplus */\n\n/* eslint-disable no-restricted-syntax */\nimport moment from 'moment';\n\nconst nextIrrigation = (weekData, roundsData) => {\n  if (!weekData || !roundsData) {\n    return 'Error';\n  }\n\n  const nextSevenDays = [];\n  const irrigationStartHours = Object.keys(roundsData).map(round => moment(roundsData[round].startTime, 'HH:mm:ss'));\n  const minTime = moment.min(irrigationStartHours);\n\n  for (let i = 0; i < 7; i++) {\n    nextSevenDays[i] = moment().add(i, 'days').format('dddd');\n    let nextIrrigationTime = moment(new Date(), 'HH:mm:ss');\n    let nextIrrigationRound;\n\n    if (weekData[nextSevenDays[i].toLowerCase()]) {\n      //   for (const [, round] of Object.entries(roundsData)) {\n      //     const startTimeMoment = moment(round.startTime, 'HH:mm:ss');\n      //     if (\n      //       (round.isActive &&\n      //         i === 0 && // i = 0 - today\n      //         startTimeMoment.isAfter(moment(new Date(), 'HH:mm:ss'))) ||\n      //       (round.isActive && i !== 0)\n      //     ) {\n      //       if (startTimeMoment.isBefore(nextIrrigationTime)) {\n      //         nextIrrigationTime = startTimeMoment;\n      //         nextIrrigationRound = round;\n      //       }\n      //     }\n      //   }\n      if (nextIrrigationRound) {\n        const times = nextIrrigationRound.startTime.split(':');\n        return `${nextSevenDays[i]} ${times[0]}:${times[1]}`;\n      }\n    }\n  }\n\n  return 'Not set';\n};\n\nexport default nextIrrigation;","map":{"version":3,"sources":["/Users/tamirhen/Desktop/Irrigation-System-React/irrigation-react/src/utils/NextIrrigation.js"],"names":["moment","nextIrrigation","weekData","roundsData","nextSevenDays","irrigationStartHours","Object","keys","map","round","startTime","minTime","min","i","add","format","nextIrrigationTime","Date","nextIrrigationRound","toLowerCase","times","split"],"mappings":"AAAA;;AACA;;AACA;;AACA;AACA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,UAAX,KAA0B;AAC/C,MAAI,CAACD,QAAD,IAAa,CAACC,UAAlB,EAA8B;AAC5B,WAAO,OAAP;AACD;;AACD,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,GAAxB,CAA6BC,KAAD,IACvDT,MAAM,CAACG,UAAU,CAACM,KAAD,CAAV,CAAkBC,SAAnB,EAA8B,UAA9B,CADqB,CAA7B;AAGA,QAAMC,OAAO,GAAGX,MAAM,CAACY,GAAP,CAAWP,oBAAX,CAAhB;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BT,IAAAA,aAAa,CAACS,CAAD,CAAb,GAAmBb,MAAM,GAAGc,GAAT,CAAaD,CAAb,EAAgB,MAAhB,EAAwBE,MAAxB,CAA+B,MAA/B,CAAnB;AACA,QAAIC,kBAAkB,GAAGhB,MAAM,CAAC,IAAIiB,IAAJ,EAAD,EAAa,UAAb,CAA/B;AACA,QAAIC,mBAAJ;;AACA,QAAIhB,QAAQ,CAACE,aAAa,CAACS,CAAD,CAAb,CAAiBM,WAAjB,EAAD,CAAZ,EAA8C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAID,mBAAJ,EAAyB;AACvB,cAAME,KAAK,GAAGF,mBAAmB,CAACR,SAApB,CAA8BW,KAA9B,CAAoC,GAApC,CAAd;AACA,eAAQ,GAAEjB,aAAa,CAACS,CAAD,CAAI,IAAGO,KAAK,CAAC,CAAD,CAAI,IAAGA,KAAK,CAAC,CAAD,CAAI,EAAnD;AACD;AACF;AACF;;AACD,SAAO,SAAP;AACD,CApCD;;AAsCA,eAAenB,cAAf","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-restricted-syntax */\nimport moment from 'moment';\n\nconst nextIrrigation = (weekData, roundsData) => {\n  if (!weekData || !roundsData) {\n    return 'Error';\n  }\n  const nextSevenDays = [];\n  const irrigationStartHours = Object.keys(roundsData).map((round) =>\n    moment(roundsData[round].startTime, 'HH:mm:ss'),\n  );\n  const minTime = moment.min(irrigationStartHours);\n\n  for (let i = 0; i < 7; i++) {\n    nextSevenDays[i] = moment().add(i, 'days').format('dddd');\n    let nextIrrigationTime = moment(new Date(), 'HH:mm:ss');\n    let nextIrrigationRound;\n    if (weekData[nextSevenDays[i].toLowerCase()]) {\n      //   for (const [, round] of Object.entries(roundsData)) {\n      //     const startTimeMoment = moment(round.startTime, 'HH:mm:ss');\n      //     if (\n      //       (round.isActive &&\n      //         i === 0 && // i = 0 - today\n      //         startTimeMoment.isAfter(moment(new Date(), 'HH:mm:ss'))) ||\n      //       (round.isActive && i !== 0)\n      //     ) {\n      //       if (startTimeMoment.isBefore(nextIrrigationTime)) {\n      //         nextIrrigationTime = startTimeMoment;\n      //         nextIrrigationRound = round;\n      //       }\n      //     }\n      //   }\n      if (nextIrrigationRound) {\n        const times = nextIrrigationRound.startTime.split(':');\n        return `${nextSevenDays[i]} ${times[0]}:${times[1]}`;\n      }\n    }\n  }\n  return 'Not set';\n};\n\nexport default nextIrrigation;\n"]},"metadata":{},"sourceType":"module"}