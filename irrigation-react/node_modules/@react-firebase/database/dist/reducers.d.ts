import { FirebaseDatabaseNodeState, FirebaseDatabaseNodeProps } from "./types";
export declare const getPropsOrNull: (props: FirebaseDatabaseNodeProps) => FirebaseDatabaseNodeProps;
export declare const havePropsChanged: (prevProps: FirebaseDatabaseNodeProps, props: FirebaseDatabaseNodeProps) => boolean;
export declare const hasStateChanged: (prevState: FirebaseDatabaseNodeState, state: FirebaseDatabaseNodeState) => boolean;
export declare const whichPropsChanged: (prevProps: FirebaseDatabaseNodeProps, props: FirebaseDatabaseNodeProps) => string[];
export declare const reducers: {
    setIsLoading: (isLoading: boolean) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
    setValue: (value: any) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
    setPath: (path: string) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
    addKeyToList: (key: string) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
    removeKeyFromList: (key: string) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
    addToList: (value: any, key: string, order: number) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
    removeFromList: (value: any, key: string) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
    removeFirstFromList: (count: number) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
    removeLastFromList: (count: number) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
    prependKeyToList: (key: string) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
    prependToList: (value: any, key: string) => (state: FirebaseDatabaseNodeState) => FirebaseDatabaseNodeState;
};
export declare const isObject: (value: any) => boolean;
