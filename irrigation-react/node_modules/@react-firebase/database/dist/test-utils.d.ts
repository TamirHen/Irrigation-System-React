/// <reference path="node_modules/@types/lodash/common/common.d.ts" />
/// <reference path="node_modules/@types/lodash/common/array.d.ts" />
/// <reference path="node_modules/@types/lodash/common/collection.d.ts" />
/// <reference path="node_modules/@types/lodash/common/date.d.ts" />
/// <reference path="node_modules/@types/lodash/common/function.d.ts" />
/// <reference path="node_modules/@types/lodash/common/lang.d.ts" />
/// <reference path="node_modules/@types/lodash/common/math.d.ts" />
/// <reference path="node_modules/@types/lodash/common/number.d.ts" />
/// <reference path="node_modules/@types/lodash/common/object.d.ts" />
/// <reference path="node_modules/@types/lodash/common/seq.d.ts" />
/// <reference path="node_modules/@types/lodash/common/string.d.ts" />
/// <reference path="node_modules/@types/lodash/common/util.d.ts" />
import * as firebase from "firebase/app";
import "firebase/firestore";
import * as React from "react";
export declare const initFirebase: () => void;
export declare const getFirebase: ((conf?: any) => typeof firebase) & import("_").MemoizedFunction;
export declare const deleteValueAtPath: (path: string) => Promise<string>;
export declare const getValueAtPath: (path: string) => Promise<any>;
export declare const setValueAtPath: (path: string, value: any) => Promise<FirebaseFirestore.WriteResult>;
export declare const before: (path?: string) => Promise<void>;
export declare const after: (path?: string) => Promise<void>;
export declare const IfNotFalsy: ({ condition, children }: {
    condition: any;
    children: any;
}) => any;
export declare const s: (v: any) => string;
export declare const p: (v: any) => any;
export declare const WithTestId: ({ id, children }: {
    id: string;
    children: any;
}) => React.SFCElement<{
    "data-testid": string;
}>;
export declare const isBoolean: (val: any) => boolean;
export declare const IfDefined: ({ value, children }: {
    value: any;
    children: any;
}) => any;
